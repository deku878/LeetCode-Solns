{"id":1318985712,"question_id":1170,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1720809093,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1318985712/","is_pending":"Not Pending","title":"Shortest Common Supersequence ","memory":"12.3 MB","code":"class Solution {\n    string LCS(string str1, string str2, int m, int n)\n    {\n        // matrix for Memoization\n        int t[m+1][n+1];\n        \n        // string for storing shortest common super subsequence\n        string ind = \"\";\n        \n        // filling dp / t Matrix\n        \n        for(int i = 0;i < m+1; ++i)\n        {\n            for(int j = 0; j< n+1; ++j)\n            {\n                // Initialising first row and first column of dp / t matrix to 0\n                if(i == 0 || j == 0)\n                    t[i][j] = 0;\n            }\n        }\n        \n        for(int i = 1; i < m+1; ++i)\n        {\n            for(int j = 1; j < n+1; ++j)\n            {\n                if(str1[i-1] == str2[j-1])\n                    t[i][j] = 1 + t[i-1][j-1];\n                else\n                    t[i][j] = max(t[i-1][j], t[i][j-1]);\n            }\n        }\n        \n        // making shortest common supersubsequence\n        int i = m, j = n;\n        \n        while(i > 0 && j > 0)\n        {\n            if(str1[i-1] == str2[j-1])\n            {\n                // if current character in str1 and str2 are same, then\n                // current character is part of LCS\n                \n                ind.push_back(str1[i-1]); // put current character of LCS in ind\n                --i;                     // reduce values of i,j\n                --j;\n            }\n            \n            // if current character in str1 and str2 are different\n            \n            else if(t[i][j-1] > t[i-1][j])\n            {\n                ind.push_back(str2[j-1]);  // put current character of str2 in ind\n                --j;                       // reduce value of j\n            }\n            \n            else\n            {\n                ind.push_back(str1[i-1]);  // put current character of str1 in ind\n                --i;                       // reduce value of i \n            }\n        }\n        \n        // if str2 reaches its end,  put remaining characters of\n        // str1 in ind\n        \n        while( i > 0)\n        {\n            ind.push_back(str1[i-1]);\n            --i;\n        }\n        \n        // if str1 reaches its end, put remaining characters of \n        // str2 in ind\n        \n        while( j > 0)\n        {\n            ind.push_back(str2[j-1]);\n            --j;\n        }\n        \n        // reverse LCS as we started storing from t[m][n]\n        reverse(ind.begin(),ind.end());\n        \n        // return the LCS\n        return ind;\n    }\n    \npublic:\n    string shortestCommonSupersequence(string str1, string str2) {\n        \n        int m = str1.length();\n        int n = str2.length();\n        \n        return LCS(str1, str2, m ,n);\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"shortest-common-supersequence","has_notes":false,"flag_type":1}