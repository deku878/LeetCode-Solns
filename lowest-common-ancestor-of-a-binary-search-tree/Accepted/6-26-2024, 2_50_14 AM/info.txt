{"id":1300263435,"question_id":235,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1719350414,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1300263435/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"21.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        int small=min(p->val,q->val);\n        int large=max(p->val,q->val);\n        TreeNode* x=root;\n        while(x!=NULL){\n            if(x->val<small){\n                x=x->right;\n            }\n            else if(x->val>large){\n                x=x->left;\n            }\n            else{\n                return x;\n            }\n        }\n        return NULL;\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}