{"id":1311990450,"question_id":1912,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1720290137,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1311990450/","is_pending":"Not Pending","title":"Number of Restricted Paths From First to Last Node","memory":"N/A","code":"class Solution {\npublic:\n    const int MOD = 1000000007;\n    typedef pair<int, int> pii;\n\n    int countRestrictedPaths(int n, vector<vector<int>>& edges) {\n        vector<vector<pair<int, int>>> lis(n + 1);\n\n        for (auto& edge : edges) {\n            int i = edge[0], j = edge[1], k = edge[2];\n            lis[i].push_back({j, k});\n            lis[j].push_back({i, k});\n        }\n\n        vector<long long> score(n + 1, 0); \n        score[n] = 1;\n\n        vector<int> least(n + 1, numeric_limits<int>::max());\n        priority_queue<pii, vector<pii>, greater<pii>> heap; \n        heap.push({0, n}); \n\n        while (!heap.empty()) {\n            int u = heap.top().first;\n            int v = heap.top().second;\n            heap.pop();\n\n\n            for (auto& edge : lis[v]) {\n                int i = edge.first;\n                int k = edge.second;\n                int temp = u + k;\n\n                if (temp < least[i]) {\n                    least[i] = temp;\n                    heap.push({temp, i});\n                }\n\n                if (u < least[i]) {\n                    score[i] = (score[i] + score[v]) % MOD;\n                }\n            }\n        }\n\n        return score[1];\n    }\n};\n","compare_result":"11111111101111110110111101101100110110111001010101110000100010111110101111010","title_slug":"number-of-restricted-paths-from-first-to-last-node","has_notes":false,"flag_type":1}