{"id":1319342153,"question_id":1716,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1720850491,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1319342153/","is_pending":"Not Pending","title":"Maximum Non Negative Product in a Matrix","memory":"13.8 MB","code":"class Solution {\npublic:\n        const long long MOD = 1e9 + 7;\n        int maxProductPath(vector<vector<int>>& grid) {\n        long long mx[20][20] = {0};\n        long long mn[20][20] = {0};\n        int row = grid.size(), col = grid[0].size();\n        \n        // Init\n        mx[0][0] = mn[0][0] = grid[0][0];\n        \n        // Init the row0 and col0 to be the continuous multiply of the elements.\n        for(int i = 1; i < row; i++){\n            mx[i][0] = mn[i][0] = mx[i - 1][0] * grid[i][0];\n        }\n        for(int j = 1; j < col; j++){\n            mx[0][j] = mn[0][j] = mx[0][j - 1] * grid[0][j];\n        }\n        \n        // DP as the explanation picture shows\n        for(int i = 1; i < row; i++){\n            for(int j = 1; j < col; j++){\n                mx[i][j] = max(max(mx[i - 1][j], mx[i][j - 1]) * grid[i][j], min(mn[i - 1][j], mn[i][j - 1]) * grid[i][j]);\n                mn[i][j] = min(max(mx[i - 1][j], mx[i][j - 1]) * grid[i][j], min(mn[i - 1][j], mn[i][j - 1]) * grid[i][j]);\n            }\n        }\n        \n        return mx[row - 1][col - 1] < 0 ? -1 : mx[row - 1][col - 1] % MOD;\n    }\n\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-non-negative-product-in-a-matrix","has_notes":false,"flag_type":1}