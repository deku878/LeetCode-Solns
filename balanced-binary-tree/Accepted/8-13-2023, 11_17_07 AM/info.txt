{"id":1019909416,"question_id":110,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1691905627,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/1019909416/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"21 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint height(TreeNode* root){\n    if(root==NULL){\n        return 0;\n    }\n    int lefth=height(root->left);\n    int righth=height(root->right);\n    int ans=1+max(lefth,righth);\n    return ans;\n}\n    bool isBalanced(TreeNode* root) {\n        if(root==NULL){\n            return true;}\n        int lefth=height(root->left);\n        int righth=height(root->right);\n        int diff=abs(lefth-righth);\n        bool ans=(diff<=1);\n        bool leftans=isBalanced(root->left);\n        bool rightans=isBalanced(root->right);\n        if(ans and leftans and rightans){\n            return true;\n        }\n        else{\n            return false;\n        }}\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}