{"id":1317511224,"question_id":1121,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1720698238,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1317511224/","is_pending":"Not Pending","title":"Partition Array for Maximum Sum","memory":"11 MB","code":"class Solution {\npublic:\n       int t[501];\n    int solve(vector<int>& ip,int ind,int n,int k){\n        if(ind>=n) return 0; \n\n        if(t[ind]!=-1) return t[ind];\n\n        int ans=INT_MIN;\n        int maxi=INT_MIN;\n\n        // jis index pe hai vnha se k size tak ka check kr rhe \n        // you may think that why min ?\n        // think about the case that, you have not k element then the group must be less than k na, isiliye ki out of bound na ho jaye.\n        for(int i=ind;i<min(ind+k,n);i++){\n            maxi=max(ip[i],maxi);\n            // partition kar rhe and us range ka maximum nikal rhe\n            ans=max(ans,solve(ip,i+1,n,k) +(i-ind+1)*maxi);\n        }\n\n        return t[ind]=ans;\n    }\n    int maxSumAfterPartitioning(vector<int>& arr, int k) {\n        int n=arr.size();\n        memset(t,-1,sizeof(t));\n        return solve(arr,0,n,k);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"partition-array-for-maximum-sum","has_notes":false,"flag_type":1}