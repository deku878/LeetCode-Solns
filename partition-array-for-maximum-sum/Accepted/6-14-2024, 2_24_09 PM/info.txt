{"id":1287922020,"question_id":1121,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1718355249,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1287922020/","is_pending":"Not Pending","title":"Partition Array for Maximum Sum","memory":"11 MB","code":"class Solution {\npublic:\n\nint f(int ind, vector<int> &num, int k, vector<int> &dp) {\n    int n = num.size();\n\n    // Base case: If the current index is equal to the size of the array, return 0.\n    if (ind == n) return 0;\n\n    // If the result for this index is already computed, return it from dp array.\n    if (dp[ind] != -1) return dp[ind];\n\n    int len = 0;\n    int maxi = INT_MIN;\n    int maxAns = INT_MIN;\n\n    // Loop through the array starting from the current index.\n    for (int j = ind; j < min(ind + k, n); j++) {\n        len++;\n        maxi = max(maxi, num[j]);\n        int sum = len * maxi + f(j + 1, num, k, dp);\n        maxAns = max(maxAns, sum);\n    }\n\n    // Store the computed result in the dp array and return it.\n    return dp[ind] = maxAns;\n}\n    int maxSumAfterPartitioning(vector<int>& arr, int k) {\n        vector<int>dp(arr.size(),-1);\n        return f(0,arr,k,dp);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"partition-array-for-maximum-sum","has_notes":false,"flag_type":1}