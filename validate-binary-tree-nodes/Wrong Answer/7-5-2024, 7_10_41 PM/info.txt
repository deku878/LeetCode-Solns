{"id":1310502260,"question_id":1275,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1720186841,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1310502260/","is_pending":"Not Pending","title":"Validate Binary Tree Nodes","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> parent, rank;\n\n    int findpar(int x) {\n        if (parent[x] == x) {\n            return x;\n        }\n        return parent[x] = findpar(parent[x]);\n    }\n\n    void union1(int x, int y) {\n        int p1 = findpar(x);\n        int p2 = findpar(y);\n        \n        if (p1 != p2) {\n            if (rank[p1] < rank[p2]) {\n                parent[p1] = p2;\n            } else if (rank[p1] > rank[p2]) {\n                parent[p2] = p1;\n            } else {\n                parent[p2] = p1;\n                rank[p1]++;\n            }\n        }\n    }\n   \n    bool validateBinaryTreeNodes(int n, vector<int>& l, vector<int>& r) {\n        parent.resize(n);\n        rank.resize(n, 0);\n        \n        for (int i = 0; i < n; ++i) {\n            parent[i] = i;\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (l[i] != -1) {\n                if (findpar(l[i]) == findpar(i)) {\n                    return false;\n                }\n                union1(i, l[i]);\n            }\n            if (r[i] != -1) {\n                if (findpar(r[i]) == findpar(i)) {\n                    return false;\n                }\n                union1(i, r[i]);\n            }\n        }\n        \n        int components = 0;\n        for (int i = 0; i < n; ++i) {\n            if (parent[i] == i) {\n                components++;\n            }\n        }\n        \n        return components == 1;\n    }\n};\n","compare_result":"111111101011111111111111111111111111111111111111111","title_slug":"validate-binary-tree-nodes","has_notes":false,"flag_type":1}