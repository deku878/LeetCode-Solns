{"id":1280206020,"question_id":820,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1717737950,"status":10,"status_display":"Accepted","runtime":"142 ms","url":"/submissions/detail/1280206020/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"62.9 MB","code":"class Solution {\npublic:\n    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {\n        int n=graph.size();\n        vector<int> vis(n,0);\n        vector<int> dis(n,0);\n        vector<int> adj[n];\n        for(int i=0;i<n;i++){\n            for(auto &x:graph[i]){\n                adj[x].push_back(i);\n                dis[i]++;\n            }\n        }\n        queue<int> q;\n        for(int i=0;i<n;i++){\n            if(dis[i]==0){\n                q.push(i);\n            }\n        }\n        vector<int> ans;\n        while(!q.empty()){\n            int node=q.front();\n            ans.push_back(node);\n            q.pop();\n            for(auto x:adj[node]){\n                dis[x]--;\n                if(dis[x]==0){\n                    q.push(x);\n                }\n            }\n        }\n        sort(ans.begin(),ans.end());\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states","has_notes":false,"flag_type":1}