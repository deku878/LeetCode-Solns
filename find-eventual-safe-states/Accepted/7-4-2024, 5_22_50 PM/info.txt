{"id":1309338232,"question_id":820,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1720093970,"status":10,"status_display":"Accepted","runtime":"158 ms","url":"/submissions/detail/1309338232/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"62.6 MB","code":"class Solution {\npublic:\n    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {\n        int n=graph.size();\n        vector<int>adj[n];\n         vector<int>indegree(n,0);\n         //we will reverse the edges direction\n        for(int i=0;i<n;i++){\n            int m=graph[i].size();\n            for(int j=0;j<m;j++){\n                adj[graph[i][j]].push_back(i);\n                indegree[i]++;\n            }\n        }\nvector<int>ans;\nqueue<int>q;\n\nfor(int i=0;i<n;i++){\n    if(indegree[i]==0)q.push(i);\n}\n\nwhile(!q.empty()){\n    int node=q.front();\n    q.pop();\n    ans.push_back(node);\n    for(auto it:adj[node]){\n        indegree[it]--;\n        if(indegree[it]==0)q.push(it);\n    }\n}\nsort(ans.begin(),ans.end());\nreturn ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states","has_notes":false,"flag_type":1}