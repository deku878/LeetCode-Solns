{"id":1275340558,"question_id":662,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1717335493,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1275340558/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"18.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    #define ll long long\n    int widthOfBinaryTree(TreeNode* root) {\n        queue<pair<TreeNode*, int>> q;\n        \n        // push the root into queue\n        \n        q.push({root, 0});\n        \n        int max_width = INT_MIN;\n        \n        // now run a bfs \n        \n        while(!q.empty())\n        {\n            int size = q.size();\n            \n            int min_idx = q.front().second;\n            \n            int first_idx, last_idx;\n            \n            for(int i = 0; i < size; i++)\n            {\n                TreeNode* curr_node = q.front().first;\n                \n                int curr_idx = q.front().second;\n                \n                curr_idx -= min_idx;\n                \n                q.pop();\n                \n                if(i == 0)\n                {\n                    first_idx = curr_idx;\n                }\n                \n                if(i == size - 1)\n                {\n                    last_idx = curr_idx;\n                }\n                \n                // push the left child\n                \n                if(curr_node -> left)\n                {\n                    q.push({curr_node -> left, (ll) 2 * curr_idx + 1});\n                }\n                \n                // push the right child\n                \n                if(curr_node -> right)\n                {\n                    q.push({curr_node -> right, (ll) 2 * curr_idx + 2});\n                }\n            }\n            \n            // update max width\n            \n            max_width = max(max_width, last_idx - first_idx + 1);\n        }\n        \n        return max_width;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}