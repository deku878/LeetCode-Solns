{"id":1307599243,"question_id":662,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1719961294,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1307599243/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"18.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        if (root == nullptr) {\n            return 0;\n        }\n        \n        std::queue<std::pair<unsigned long long, TreeNode*>> q;\n        q.push({0, root});\n        unsigned long long maxWidth = 0;\n        \n        while (!q.empty()) {\n            int sz = q.size();\n            unsigned long long currMin = q.front().first;\n            unsigned long long currMax = q.back().first;\n            maxWidth = std::max(maxWidth, currMax - currMin + 1);\n            \n            for (int i = 0; i < sz; i++) {\n                auto x = q.front();\n                q.pop();\n                unsigned long long index = x.first - currMin;\n                TreeNode* node = x.second;\n                \n                if (node->left != nullptr) {\n                    q.push({2 * index + 1, node->left});\n                }\n                if (node->right != nullptr) {\n                    q.push({2 * index + 2, node->right});\n                }\n            }\n        }\n        \n        return maxWidth;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}