{"id":1307614969,"question_id":124,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1719963665,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1307614969/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"26.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nint maxm=INT_MIN;\npublic:\n\n    int maxs(TreeNode* root) {\n        if (root == NULL) {\n            return 0;\n        }\n\n        int left = max(0, maxs(root->left));  // Calculate max path sum for left subtree\n        int right = max(0, maxs(root->right));  // Calculate max path sum for right subtree\n\n        // Update the maximum path sum using the current node\n        maxm = max(maxm, root->val + left + right);\n\n        // Return the maximum path sum for paths passing through the current node\n        return root->val + max(left, right);\n    }\n\n    int maxPathSum(TreeNode* root) {\n        if (root == NULL) {\n            return 0;\n        }\n        maxs(root);\n        return maxm;\n    }\n\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}