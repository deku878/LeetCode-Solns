{"id":1306299687,"question_id":85,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1719864601,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/1306299687/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"21.4 MB","code":"class Solution {\npublic:\n    vector<int> nxtg(vector<int>& x, int n) {\n        vector<int> ans(n);\n        stack<int> st;\n        st.push(-1);\n        for (int i = n - 1; i >= 0; i--) {\n            int curr = x[i];\n            while (st.top() != -1 && x[st.top()] >= curr) {\n                st.pop();\n            }\n            ans[i] = st.top();\n            st.push(i);\n        }\n        return ans;\n    }\n\n    vector<int> preg(vector<int>& x, int n) {\n        vector<int> ans(n);\n        stack<int> st;\n        st.push(-1);\n        for (int i = 0; i < n; i++) {\n            int curr = x[i];\n            while (st.top() != -1 && x[st.top()] >= curr) {\n                st.pop();\n            }\n            ans[i] = st.top();\n            st.push(i);\n        }\n        return ans;\n    }\n\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        if (matrix.empty()) return 0;\n\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<vector<int>> mat(m, vector<int>(n, 0));\n\n        // Convert char matrix to int matrix\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                mat[i][j] = matrix[i][j] - '0';\n            }\n        }\n\n        // Build histogram heights\n        for (int i = 1; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] == 1) {\n                    mat[i][j] += mat[i - 1][j];\n                }\n            }\n        }\n\n        int area = 0;\n        for (int i = 0; i < m; i++) {\n            vector<int> nxt = nxtg(mat[i], n);\n            vector<int> prev = preg(mat[i], n);\n            for (int j = 0; j < n; j++) {\n                int height = mat[i][j];\n                if (nxt[j] == -1) {\n                    nxt[j] = n;\n                }\n                int width = nxt[j] - prev[j] - 1;\n                area = max(area, height * width);\n            }\n        }\n        return area;\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle","has_notes":false,"flag_type":1}