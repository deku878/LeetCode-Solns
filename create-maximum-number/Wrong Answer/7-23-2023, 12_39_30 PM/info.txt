{"id":1001617179,"question_id":321,"lang":"cpp","lang_name":"C++","time":"1 year, 2 months","timestamp":1690096170,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1001617179/","is_pending":"Not Pending","title":"Create Maximum Number","memory":"N/A","code":"class Solution {\npublic:\nvector<int>greatestsubsequence(vector<int> nums,int k){\n    vector<int>ans;\n    int n=nums.size();\n    for(int i=0;i<n;i++){\n        while(ans.size()>0 && ans.back()<nums[i] && ((k-ans.size())<(n-i))) // If true, then pop out the last element\n            ans.pop_back();\n            if(ans.size()<k)ans.push_back(nums[i]); \n\n    }\n    return ans;\n}\nvoid pop_front(vector<int> p){\n    if(p.size()>0){\n        p.erase(p.begin());\n    }\n}\nvector<int>merge(vector<int>&num1,vector<int>&num2,int k){\n    vector<int>temp1;\n    for(int i=0;i<k;i++){\n        vector<int>temp=max(num1,num2);\n        int fr=temp.front();\n        if(num1>num2){\n            pop_front(num1);\n        }\n        else{\n            pop_front(num2);\n        }\n        temp1.push_back(fr);\n    }\n    return temp1;\n}\n    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {\n        vector<int>res;\n        for(int i=0;i<=k;i++){\n            int j=k-i;\n            if(i>nums1.size() or j>nums2.size()){\n                continue;\n            }\n             vector<int>max1=greatestsubsequence(nums1,i);\n            vector<int>max2=greatestsubsequence(nums2,j);\n            vector<int>temp=merge(max1,max2,k);\n                res=max(res,temp);\n        }\n        return res;\n    }\n};","compare_result":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100001","title_slug":"create-maximum-number","has_notes":false,"flag_type":1}