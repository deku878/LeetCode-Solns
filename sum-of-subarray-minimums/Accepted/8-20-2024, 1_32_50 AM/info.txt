{"id":1361759031,"question_id":943,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1724097770,"status":10,"status_display":"Accepted","runtime":"61 ms","url":"/submissions/detail/1361759031/","is_pending":"Not Pending","title":"Sum of Subarray Minimums","memory":"45.6 MB","code":"class Solution {\npublic:\n    int sumSubarrayMins(vector<int>& arr) {\n        int M = 1e9+7;\n        long long int ans = 0;\n        stack<int> s;\n        vector<int> left(arr.size()), right(arr.size());\n\n        // Calculate left\n        for(int i = 0; i < arr.size(); i++){\n            while(!s.empty() && arr[s.top()] > arr[i]) {\n                s.pop();\n            }\n            left[i] = (s.empty()) ? -1 : s.top();\n            s.push(i);\n        }\n\n        // Clear stack\n        while(!s.empty()) {\n            s.pop();\n        }\n\n        // Calculate right\n        for(int i = arr.size()-1; i >= 0; i--){\n            while(!s.empty() && arr[s.top()] >= arr[i]) {\n                s.pop();\n            }\n            right[i] = (s.empty()) ? arr.size() : s.top();\n            s.push(i);\n        }\n\n        // Calculate answer\n        for(int i = 0; i < arr.size(); i++){\n            ans = (ans + (long long)arr[i]*(i-left[i])*(right[i]-i)) % M;\n        }\n\n        return (int)ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-subarray-minimums","has_notes":false,"flag_type":1}