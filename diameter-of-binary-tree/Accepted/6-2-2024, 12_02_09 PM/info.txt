{"id":1274987753,"question_id":543,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1717309929,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1274987753/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"22.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    int help(TreeNode* root, int& diameter) {\n        if (root == NULL) return 0;                         // Base case: NULL node has height 0\n        int left = help(root->left, diameter);             // Height of left subtree\n        int right = help(root->right, diameter);          // Height of right subtree\n        diameter = max(diameter, left + right);          // Update diameter\n        return max(left, right) + 1;                    // Return current subtree height\n    }\n\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        int diameter = 0;                            // Initialize diameter to 0\n        help(root, diameter);                       // Call helper function\n        return diameter;                           // Return final diameter\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false,"flag_type":1}