{"id":1309545583,"question_id":684,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1720107919,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1309545583/","is_pending":"Not Pending","title":"Redundant Connection","memory":"11.6 MB","code":"class Solution {\npublic:\n    vector<int>rank;\n    vector<int>parent;\n    int findpar(int x){\n        if(parent[x]==x){\n            return x;\n        }\n        return parent[x]=findpar(parent[x]);\n    }\n    void union1(int x,int y){\n        \n        int p1=findpar(x);\n        int p2=findpar(y);\n        if(p1==p2){\n            return;\n        }\n        if(rank[p1]<rank[p2]){\n            parent[p1]=p2;\n        }\n        else if(rank[p2]<rank[p1]){\n            parent[p2]=p1;\n        }\n        else{\n            parent[p2]=p1;\n            rank[p1]++;\n        }\n\n    }\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        vector<int>p;\n        int n=edges.size();\n        rank.resize(n+1,0);\n        parent.resize(n+1,0);\n        for(int i=0;i<=n;i++){\n            parent[i]=i;\n        }\n        for(int i=0;i<n;i++){\n            int p1=findpar(edges[i][0]);\n            int p2=findpar(edges[i][1]);\n            if(p1==p2){\n                p.push_back(edges[i][0]);\n                p.push_back(edges[i][1]);\n            }\n            else{\n                union1(edges[i][0],edges[i][1]);\n            }\n        }\n        return p;\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false,"flag_type":1}