{"id":1313246131,"question_id":2445,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1720381423,"status":10,"status_display":"Accepted","runtime":"930 ms","url":"/submissions/detail/1313246131/","is_pending":"Not Pending","title":"Reachable Nodes With Restrictions","memory":"191.8 MB","code":"class Solution {\npublic:\n    vector<vector<int>> adj;\n    unordered_set<int> restrictedSet;\n    vector<bool> visited;\n    \n    void dfs(int node) {\n        visited[node] = true;\n        for (int neighbor : adj[node]) {\n            if (!visited[neighbor] && restrictedSet.find(neighbor) == restrictedSet.end()) {\n                dfs(neighbor);\n            }\n        }\n    }\n\n    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {\n        adj.resize(n);\n        visited.resize(n, false);\n        restrictedSet = unordered_set<int>(restricted.begin(), restricted.end());\n        \n        // Create adjacency list\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        \n        // Start DFS from node 0 if it's not restricted\n        int count = 0;\n        if (restrictedSet.find(0) == restrictedSet.end()) {\n            dfs(0);\n        }\n        \n        // Count reachable nodes\n        for (bool nodeVisited : visited) {\n            if (nodeVisited) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"reachable-nodes-with-restrictions","has_notes":false,"flag_type":1}