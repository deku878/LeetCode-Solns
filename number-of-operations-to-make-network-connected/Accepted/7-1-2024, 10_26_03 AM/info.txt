{"id":1305427055,"question_id":1442,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1719809763,"status":10,"status_display":"Accepted","runtime":"71 ms","url":"/submissions/detail/1305427055/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"41.1 MB","code":"class Solution {\nvector<int>rank,parent;\npublic:\n        int find(int x) {\n        if (parent[x] == x) {\n            return x;\n        }\n        return parent[x] = find(parent[x]);\n    }\n\n    void union1(int x, int y) {\n        int p1 = find(x);\n        int p2 = find(y);\n        if (p1 == p2) {\n            return;\n        }\n        if (rank[p2] < rank[p1]) {\n            parent[p2] = p1;\n        } else if (rank[p1] < rank[p2]) {\n            parent[p1] = p2;\n        } else {\n            parent[p1] = p2;\n            rank[p2]++;\n        }\n    }\n\n    int makeConnected(int n, vector<vector<int>>& connections) {\n        parent.resize(n);\n        rank.resize(n, 0);\n        for (int i = 0; i < n; i++) {\n            parent[i] = i;\n        }\n\n        int extraEdges = 0;\n        for (const auto& conn : connections) {\n            if (find(conn[0]) == find(conn[1])) {\n                extraEdges++;\n            } else {\n                union1(conn[0], conn[1]);\n            }\n        }\n\n        int connectedComponents = 0;\n        for (int i = 0; i < n; i++) {\n            if (parent[i] == i) {\n                connectedComponents++;\n            }\n        }\n\n        if (extraEdges >= connectedComponents - 1) {\n            return connectedComponents - 1;\n        }\n        return -1;\n    }\n\n};","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected","has_notes":false,"flag_type":1}