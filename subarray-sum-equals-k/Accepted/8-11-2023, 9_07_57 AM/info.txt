{"id":1018084419,"question_id":560,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1691725077,"status":10,"status_display":"Accepted","runtime":"63 ms","url":"/submissions/detail/1018084419/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"41.5 MB","code":"class Solution {\npublic:\n       int subarraySum(vector<int>& arr, int k) {\n        int n = arr.size(); // take the size of the array\n        \n        int prefix[n]; // make a prefix array to store prefix sum\n        \n        prefix[0] = arr[0]; // for element at index at zero, it is same\n        \n        // making our prefix array\n        for(int i = 1; i < n; i++)\n        {\n            prefix[i] = arr[i] + prefix[i - 1];\n        }\n        \n        unordered_map<int,int> mp; // declare an unordered map\n        \n        int ans = 0; // to store the number of our subarrays having sum as 'k'\n        \n        for(int i = 0; i < n; i++) // traverse from the prefix array\n        {\n            if(prefix[i] == k) // if it already becomes equal to k, then increment ans\n                ans++;\n            \n            // now, as we discussed find whether (prefix[i] - k) present in map or not\n            if(mp.find(prefix[i] - k) != mp.end())\n            {\n                ans += mp[prefix[i] - k]; // if yes, then add it our answer\n            }\n            \n            mp[prefix[i]]++; // put prefix sum into our map\n        }\n        \n        return ans; // and at last, return our answer\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1}