{"id":1283886084,"question_id":1753,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1718028801,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/1283886084/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"23.5 MB","code":"class Solution {\npublic:\n    int minimumEffortPath(vector<vector<int>>& heights) {\n        int n = heights.size();\n        int m = heights[0].size();\n        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;\n        pq.push({0, {0, 0}});\n\n        vector<vector<int>> dist(n, vector<int>(m, 1e9));\n        dist[0][0] = 0;\n\n        int delrow[4] = {-1, 0, 1, 0};\n        int delcol[4] = {0, 1, 0, -1};\n        while(!pq.empty()){\n            int diff = pq.top().first;\n            int x = pq.top().second.first;\n            int y = pq.top().second.second;\n            pq.pop();\n            if(x == n-1 && y == m-1) return diff;\n\n            for(int i=0; i<4; ++i){\n                int nr = x+delrow[i];\n                int nc = y+delcol[i];\n\n                if(nr>=0 && nr<n && nc>=0 && nc<m){\n                    int newEffort = max(abs(heights[x][y] - heights[nr][nc]), diff);\n                    if(newEffort < dist[nr][nc]){\n                        dist[nr][nc] = newEffort;\n                        pq.push({newEffort, {nr, nc}});\n                    }\n                }\n            }\n        }\n\n        return 0;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort","has_notes":false,"flag_type":1}