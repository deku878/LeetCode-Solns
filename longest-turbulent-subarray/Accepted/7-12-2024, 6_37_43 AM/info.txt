{"id":1318128663,"question_id":1020,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1720746463,"status":10,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/1318128663/","is_pending":"Not Pending","title":"Longest Turbulent Subarray","memory":"67.4 MB","code":"class Solution {\npublic:\n    int maxTurbulenceSize(vector<int>& arr) {\n        int n = arr.size();\n        if (n == 1) return 1;\n\n        vector<vector<int>> dp(n, vector<int>(2, 1));\n        int maxLen = 1;\n\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > arr[i - 1]) {\n                dp[i][0] = dp[i - 1][1] + 1;\n            } else if (arr[i] < arr[i - 1]) {\n                dp[i][1] = dp[i - 1][0] + 1;\n            }\n            maxLen = max(maxLen, max(dp[i][0], dp[i][1]));\n        }\n\n        return maxLen;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-turbulent-subarray","has_notes":false,"flag_type":1}