{"id":1312882936,"question_id":2090,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1720358477,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/1312882936/","is_pending":"Not Pending","title":"Number of Ways to Arrive at Destination","memory":"36.3 MB","code":"class Solution {\npublic:\n    int countPaths(int n, vector<vector<int>>& roads) {\n        vector<pair<int, int>> adj[n];\n        for (auto it : roads)\n        {\n            adj[it[0]].push_back({it[1], it[2]});\n            adj[it[1]].push_back({it[0], it[2]});\n        }\n\n     priority_queue<pair<long long, long long>,\n                       vector<pair<long long, long long>>, greater<pair<long long, long long>>> pq;\n        vector<long long int> dist(n, 1e18), ways(n, 0);               \n        dist[0] = 0;\n        ways[0] = 1;\n        pq.push({0, 0});\n        int mod = (1e9 + 7);\n        while(!pq.empty()){\n                        long long dis = pq.top().first;\n            int node = pq.top().second;\n            pq.pop();\n            for(auto it : adj[node]){\n\n                  int adjNode = it.first;\n                long long  edW = it.second;\n                            if (dis + edW < dist[adjNode])\n                {\n                    dist[adjNode] = dis + edW;\n                    pq.push({dis + edW, adjNode});\n                    ways[adjNode] = ways[node];\n                }\n\n                                else if (dis + edW == dist[adjNode])\n                {\n                    ways[adjNode] = (ways[adjNode] + ways[node]) % mod;\n                }\n\n            }\n\n        }\n             return ways[n - 1] % mod;\n\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-to-arrive-at-destination","has_notes":false,"flag_type":1}