{"id":1288030443,"question_id":295,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1718363016,"status":10,"status_display":"Accepted","runtime":"221 ms","url":"/submissions/detail/1288030443/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"121.7 MB","code":"class MedianFinder {\npublic:\n    priority_queue<int> left; // max heap\n    priority_queue<int, vector<int>, greater<int>> right; // min heap\n\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        if (left.empty() || num < left.top()) {\n            left.push(num);\n        } else {\n            right.push(num);\n        }\n        \n        // Balance the heaps\n        if (left.size() > right.size() + 1) {\n            right.push(left.top());\n            left.pop();\n        } else if (right.size() > left.size()) {\n            left.push(right.top());\n            right.pop();\n        }\n    }\n    \n    double findMedian() {\n        if (left.empty() && right.empty()) {\n            return 0; // Both heaps are empty\n        }\n        \n        if (left.size() == right.size()) {\n            return (left.top() + right.top()) / 2.0;\n        } else {\n            return left.top(); // Median will always be in the left heap\n        }\n    }\n};\n","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}