{"id":1300270465,"question_id":1050,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1719351288,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1300270465/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"15.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* build(vector<int>&a,int &i,int &x){\n        if(i==a.size() or a[i]>x){\n            return NULL;\n        }\n        TreeNode* x1=new TreeNode(a[i++]);\n        x1->left=build(a,i,x1->val);\n        x1->right=build(a,i,x);\n        return x1;\n    }\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        int i=0;\n        int maxm=INT_MAX;\n        return build(preorder,i,maxm);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}