{"id":1277622911,"question_id":1050,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1717519212,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1277622911/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"15.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* helper(vector<int>& preorder,int& id,int limit){\n        if(id==preorder.size() or preorder[id]>limit){\n            return NULL;\n        }\n        int root_val=preorder[id];\n        TreeNode* root=new TreeNode(root_val);\n        id++;\n        root->left=helper(preorder,id,root_val);\n        root->right=helper(preorder,id,limit);\n        return root;\n    }\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        int id=0;\n        int m=INT_MAX;\n        return helper(preorder,id,m);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}