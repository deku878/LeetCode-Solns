{"id":1308523315,"question_id":1050,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1720027294,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1308523315/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"15.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic: \n    TreeNode* build(int &i,vector<int>&a,int maxm){\n        if(i==a.size() or a[i]>maxm){\n            return NULL;\n        }\n        TreeNode* node=new TreeNode(a[i++]);\n        node->left=build(i,a,node->val);\n        node->right=build(i,a,maxm);\n        return node;\n    }\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        int i=0;\n        return build(i,preorder,INT_MAX);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}