{"id":1299024069,"question_id":1029,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1719250590,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1299024069/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"13.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> verticalTraversal(TreeNode* root) {\n                if (!root) return {};\n\n        // Queue for BFS and a map to store nodes by their horizontal distance\n        queue<pair<TreeNode*, int>> q;\n        q.push({root, 0});\n        map<int, vector<int>> nodes; // horizontal distance -> nodes at that distance\n\n        while (!q.empty()) {\n            int size = q.size();\n            map<int, vector<int>> levelNodes; // temporary map for nodes at the same horizontal distance\n            \n            for (int i = 0; i < size; ++i) {\n                auto [node, hd] = q.front();\n                q.pop();\n                \n                // Add node value to the temporary map at current horizontal distance\n                levelNodes[hd].push_back(node->val);\n                \n                // Enqueue left child with adjusted horizontal distance\n                if (node->left) {\n                    q.push({node->left, hd - 1});\n                }\n                \n                // Enqueue right child with adjusted horizontal distance\n                if (node->right) {\n                    q.push({node->right, hd + 1});\n                }\n            }\n            \n            // Merge temporary map into the main map, sorting values within each horizontal distance\n            for (auto& levelPair : levelNodes) {\n                auto& vals = levelPair.second;\n                sort(vals.begin(), vals.end()); // sort values at the same horizontal distance\n                nodes[levelPair.first].insert(nodes[levelPair.first].end(), vals.begin(), vals.end());\n            }\n        }\n        \n        // Prepare result from the nodes map\n        vector<vector<int>> result;\n        for (auto& pair : nodes) {\n            result.push_back(pair.second);\n        }\n        \n        return result;\n    }\n};","compare_result":"1111111111111111111111111111111111","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}