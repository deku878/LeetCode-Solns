{"id":1313193987,"question_id":2403,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1720377630,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1313193987/","is_pending":"Not Pending","title":"Count Unreachable Pairs of Nodes in an Undirected Graph","memory":"N/A","code":"class Solution {\npublic:\n    vector<int>parent,size;\n    int par(int x){\n        if(x==parent[x]){\n            return x;\n        }\n        return parent[x]=par(parent[x]);\n    }\n    void uni(int x,int y){\n        int p1=par(x);\n        int p2=par(y);\n        if(p1==p2){\n            return;\n        }\n        if(size[p1]<size[p2]){\n            size[p2]+=size[p1];\n            parent[p1]=p2;\n        }\n        else{\n            size[p1]+=size[p2];\n            parent[p2]=p1;\n        }\n    }\n    long long countPairs(int n, vector<vector<int>>& edges) {\n        //find the number of components and the nodes in each components\n        vector<int>adj[n];\n        parent.resize(n,0);\n        size.resize(n,1);\n        for(int i=0;i<n;i++){\n            parent[i]=i;\n        }\n        for(int i=0;i<edges.size();i++){\n            int u=edges[i][0];\n            int v=edges[i][1];\n            uni(u,v);\n        }\n        map<int,int>mp;\n        for(int i=0;i<n;i++){\n            mp[parent[i]]++;\n        }\n        vector<int>x;\n        for(auto m:mp){\n            x.push_back(m.second);\n        }\n        sort(x.begin(),x.end());\n        int ans=0;\n        for(int i=0;i<x.size();i++){\n            for(int j=i+1;j<x.size();j++){\n                ans+=x[i]*x[j];\n            }\n        }\n        return ans;\n    }\n};","compare_result":"111111111000001111111111111111100000011111111111111100110000000000","title_slug":"count-unreachable-pairs-of-nodes-in-an-undirected-graph","has_notes":false,"flag_type":1}