{"id":1307649542,"question_id":94,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1719968656,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1307649542/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"9.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic: \n    vector<int> inorderTraversal(TreeNode* root) {\n        TreeNode* node=root;\n        vector<int>inorder;\n        // left root right\n\n        while(node!=NULL){\n            if(node->left==NULL){\n                inorder.push_back(node->val);\n                node=node->right;\n            }\n            else{\n                auto temp=node->left;\n                while(temp->right!=NULL and temp->right!=node){\n                    temp=temp->right;\n                }\n                if(temp->right==NULL){\n                    temp->right=node;\n                    node=node->left;\n                }\n                else{\n                    temp->right=NULL;\n                    inorder.push_back(node->val);\n                    node=node->right;\n                }\n            }\n        }\n        return inorder;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}