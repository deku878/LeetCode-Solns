{"id":1299244161,"question_id":94,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1719270637,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1299244161/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"9.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n           vector<int> result;\n    stack<TreeNode*> st;\n    TreeNode* current = root;\n\n    while (current != NULL || !st.empty()) {\n        // Reach the leftmost node of the current subtree\n        while (current != NULL) {\n            st.push(current);\n            current = current->left;\n        }\n\n        // Process the node\n        current = st.top();\n        st.pop();\n        result.push_back(current->val);\n\n        // Move to the right child\n        current = current->right;\n    }\n\n    return result;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}