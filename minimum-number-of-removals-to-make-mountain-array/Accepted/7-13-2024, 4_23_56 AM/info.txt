{"id":1319142090,"question_id":1766,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1720824836,"status":10,"status_display":"Accepted","runtime":"70 ms","url":"/submissions/detail/1319142090/","is_pending":"Not Pending","title":"Minimum Number of Removals to Make Mountain Array","memory":"14.9 MB","code":"class Solution {\npublic:\n    int minimumMountainRemovals(vector<int>& nums) {\n                int n = nums.size();\n        vector<int> lis(n, 1);\n        vector<int> lds(n, 1);\n\n        // Compute LIS for each element\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (nums[i] > nums[j]) {\n                    lis[i] = max(lis[i], lis[j] + 1);\n                }\n            }\n        }\n\n        // Compute LDS for each element\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = n - 1; j > i; --j) {\n                if (nums[i] > nums[j]) {\n                    lds[i] = max(lds[i], lds[j] + 1);\n                }\n            }\n        }\n\n        int maxMountainLength = 0;\n\n        // Calculate the maximum length of bitonic subsequence\n        for (int i = 1; i < n - 1; ++i) {\n            if (lis[i] > 1 && lds[i] > 1) {\n                maxMountainLength = max(maxMountainLength, lis[i] + lds[i] - 1);\n            }\n        }\n\n        // Minimum removals to make a mountain array\n        return n - maxMountainLength;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-removals-to-make-mountain-array","has_notes":false,"flag_type":1}