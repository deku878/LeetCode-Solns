{"id":987190801,"question_id":209,"lang":"cpp","lang_name":"C++","time":"1 year, 2 months","timestamp":1688582222,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/987190801/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"N/A","code":"class Solution {\npublic:\n    int minSubArrayLen(long long int target, vector<int>& nums) {\n    long long int sum = 0;\n    int size = 0;\n    int p = INT_MAX;\n    for (int i = 0; i < nums.size(); i++) {\n        sum = 0;\n        size = 0;\n        for (int j = i; j < nums.size(); j++) {\n            sum += nums[j];\n            size++;\n            if (sum >= target) {\n                p = min(p, size);\n                break;\n            }\n        }\n    }\n    return p == INT_MAX ? 0 : p;\n}\n};","compare_result":"11111111111111111100","title_slug":"minimum-size-subarray-sum","has_notes":false,"flag_type":1}