{"id":1307570307,"question_id":106,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1719957222,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1307570307/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"25.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* build(vector<int>&i,vector<int>&po,int is,int ie,int ps,int pe,map<int,int>&mp){\n        if(is>ie or ps>pe){\n            return NULL;\n        }\n        TreeNode* n=new TreeNode(po[pe]);\n        int numsleft=mp[po[pe]]-is;\n        int idx=mp[po[pe]];\n       \n        n->left=build(i,po,is,idx-1,ps,ps+numsleft-1,mp);\n        n->right=build(i,po,idx+1,ie,ps+numsleft,pe-1,mp);\n        return n;\n    }\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        map<int,int>mp;\n        for(int i=0;i<inorder.size();i++){\n            mp[inorder[i]]=i;\n        }\n        if(inorder.size()!=postorder.size()){\n            return NULL;\n        }\n        return build(inorder,postorder,0,inorder.size()-1,0,postorder.size()-1,mp);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}