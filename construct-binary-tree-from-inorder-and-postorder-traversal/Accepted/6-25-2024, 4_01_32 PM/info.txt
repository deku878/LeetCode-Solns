{"id":1299715820,"question_id":106,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1719311492,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1299715820/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"25.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTreep(vector<int>&preorder,int p,int q,vector<int>&inorder,int x,int y,map<int,int>&mp){\n        if(p>q or x>y){\n            return NULL;\n        }\n        TreeNode* root=new TreeNode(preorder[q]);\n        int numl=mp[preorder[q]]-x;\n        int inr=mp[preorder[q]];\n        \n        root->left=buildTreep(preorder,p,p+numl-1,inorder,x,inr-1,mp);\n        root->right=buildTreep(preorder,p+numl,q-1,inorder,inr+1,y,mp);\n        return root;\n    }\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        if(inorder.size()!=postorder.size()){\n            return NULL;\n        }\n        map<int,int>mp;\n        for(int i=0;i<inorder.size();i++){\n            mp[inorder[i]]=i;\n        }\n        return buildTreep(postorder,0,postorder.size()-1,inorder,0,inorder.size()-1,mp);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}