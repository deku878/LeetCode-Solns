{"id":1299740137,"question_id":297,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1719313161,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1299740137/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"45.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n     if(!root){\n        return \"NULL,\";\n     }\n     return to_string(root->val)+\",\"+serialize(root->left)+serialize(root->right);\n    }\n\n    // Decodes your encoded data to tree.\n\n    TreeNode* deserialize(string data) {\n        string s=\"\";queue<string>q;\n        for(int i=0;i<data.size();i++){\n            \n            if(data[i]==','){\n                q.push(s);\n                s=\"\";\n                continue;\n            }\n            s+=data[i];\n        }\n        if(s.size()!=0){\n            q.push(s);\n        }\n        return desh(q);\n    }\n    TreeNode* desh(queue<string>&q){\n        string s=q.front();\n        q.pop();\n        if(s==\"NULL\"){\n            return NULL;\n        }\n        TreeNode* v=new TreeNode(stoi(s));\n        v->left=desh(q);\n        v->right=desh(q);\n        return v;\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}