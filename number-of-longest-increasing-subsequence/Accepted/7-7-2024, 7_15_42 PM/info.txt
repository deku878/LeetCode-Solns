{"id":1312904354,"question_id":673,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1720359942,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/1312904354/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"15.7 MB","code":"class Solution {\npublic:\n    int findNumberOfLIS(vector<int>& nums) {\n        int n = nums.size();\n        if (n == 0) return 0;\n        \n        vector<int> dp(n, 1);\n        vector<int> count(n, 1);\n        int maxLen = 1;\n        \n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (nums[i] > nums[j]) {\n                    if (dp[j] + 1 > dp[i]) {\n                        dp[i] = dp[j] + 1;\n                        count[i] = count[j];\n                    } else if (dp[j] + 1 == dp[i]) {\n                        count[i] += count[j];\n                    }\n                }\n            }\n            maxLen = max(maxLen, dp[i]);\n        }\n        \n        int result = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == maxLen) {\n                result += count[i];\n            }\n        }\n        \n        return result;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}