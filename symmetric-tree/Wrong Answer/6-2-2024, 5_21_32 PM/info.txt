{"id":1275253369,"question_id":101,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1717329092,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1275253369/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        queue<TreeNode*>q;\n        q.push(root);\n        bool checker=true;\n        vector<int>jedi;\n        int level=0;\n        while(!q.empty()){\n            int l=q.size();\n            for(int i=0;i<l;i++){\n                auto k=q.front();\n                q.pop();\n                if(k->left){\n                    q.push(k->left);\n                }\n                if(k->right){\n                    q.push(k->right);\n                }\n                jedi.push_back(k->val);\n            }\n            vector<int>sith;\n            sith=jedi;\n            reverse(jedi.begin(),jedi.end());\n            if(sith!=jedi or jedi.size()!=(1<<level)){\n                checker=false;\n                break;\n            }\n            jedi.clear();\n            level++;\n        }\n        return checker;\n    }\n};","compare_result":"1111111111010111111110101011110001100111101111011111111110110111101100011011000111111111010011110111100101101101111011010111100010011100101111010000111001101011000110001001111100111100110011010111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}