{"id":1299705099,"question_id":105,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1719310758,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1299705099/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"25.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTreep(vector<int>&pre,int x,int y,vector<int>&in,int p,int q,map<int,int>&m){\n        if(x>y or p>q){\n            return NULL;\n        }\n        TreeNode* st=new TreeNode(pre[x]);\n        int numsleft=m[pre[x]]-p;\n        int inr=m[pre[x]];\n        st->left=buildTreep(pre,x+1,x+numsleft,in,p,inr-1,m);\n        st->right=buildTreep(pre,x+numsleft+1,y,in,inr+1,q,m);\n        return st;\n    }\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        if(preorder.size()!=inorder.size()){\n            return NULL;\n        }\n        map<int,int>mp;\n        for(int i=0;i<inorder.size();i++){\n            mp[inorder[i]]=i;\n        }\n        TreeNode* root1=buildTreep(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,mp);\n        return root1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}