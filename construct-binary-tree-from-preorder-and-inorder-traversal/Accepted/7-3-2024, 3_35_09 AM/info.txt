{"id":1307575503,"question_id":105,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1719957909,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1307575503/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"25.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* build(vector<int>&p,vector<int>&in,int ps,int pe,int is,int ie,map<int,int>&mp){\n        if(is>ie or ps>pe){\n            return NULL;\n        }\n        int idx=mp[p[ps]];\n        int numsleft=mp[p[ps]]-is;\n        TreeNode* x=new TreeNode(p[ps]);\n        x->left=build(p,in,ps+1,ps+numsleft,is,idx-1,mp);\n        x->right=build(p,in,ps+numsleft+1,pe,idx+1,ie,mp);\n        return x;\n    }\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        if(preorder.size()!=inorder.size()){\n            return NULL;\n        }\n        map<int,int>mp;\n        for(int i=0;i<inorder.size();i++){\n            mp[inorder[i]]=i;\n        }\n        return build(preorder,inorder,0,inorder.size()-1,0,preorder.size()-1,mp);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}