{"id":1300246842,"question_id":450,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1719348481,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1300246842/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"32.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* deletex(TreeNode* root,int key){\n        if (root == NULL) {\n        return NULL;\n    }\n\n    if (key < root->val) {\n        root->left = deletex(root->left, key);\n    } else if (key > root->val) {\n        root->right = deletex(root->right, key);\n    } else {\n        // Node with only one child or no child\n        if (root->left == NULL) {\n            TreeNode* temp = root->right;\n            delete root;\n            return temp;\n        } else if (root->right == NULL) {\n            TreeNode* temp = root->left;\n            delete root;\n            return temp;\n        }\n\n        // Node with two children: Get the inorder predecessor (rightmost in the left subtree)\n        TreeNode* temp = root->left;\n        while (temp->right != NULL) {\n            temp = temp->right;\n        }\n\n        // Copy the inorder predecessor's content to this node\n        root->val = temp->val;\n\n        // Delete the inorder predecessor\n        root->left = deletex(root->left, temp->val);\n    }\n    return root;\n    }\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        return deletex(root,key);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst","has_notes":false,"flag_type":1}