{"id":1310281477,"question_id":337,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1720170561,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1310281477/","is_pending":"Not Pending","title":"House Robber III","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int rob(TreeNode* root) {\n        vector<int>vals;\n        queue<TreeNode*>q;\n        q.push(root);\n        while(!q.empty()){\n            \n            int sz=q.size();\n            int sum=0;\n            for(int i=0;i<sz;i++){\n                auto x=q.front();\n                q.pop();\n                sum+=x->val;\n                if(x->left!=NULL){\n                    q.push(x->left);\n                }\n                if(x->right!=NULL){\n                    q.push(x->right);\n                }\n            }\n            vals.push_back(sum);\n        }\n        vector<int>nums=vals;\n        int n=nums.size();\n        vector<int>dp(n,0);\n\n        dp[0]=nums[0];\n        if(n>1){\n        dp[1]=max(dp[0],nums[1]);}\n        for(int i=2;i<n;i++){\n            dp[i]=max(dp[i-1],dp[i-2]+nums[i]);\n        }\n        return dp[n-1];\n    }\n};","compare_result":"1111111111111111110111111111111101110111111111111111110110111111111001010000000000000000000000000000000000000000000000000000","title_slug":"house-robber-iii","has_notes":false,"flag_type":1}