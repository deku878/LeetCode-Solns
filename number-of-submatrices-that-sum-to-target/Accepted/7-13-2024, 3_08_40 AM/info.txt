{"id":1319112229,"question_id":1145,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1720820320,"status":10,"status_display":"Accepted","runtime":"402 ms","url":"/submissions/detail/1319112229/","is_pending":"Not Pending","title":"Number of Submatrices That Sum to Target","memory":"154.4 MB","code":"class Solution {\npublic:\n    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {\n                int rows = matrix.size(), cols = matrix[0].size();\n        for(auto &row : matrix){\n            for(int col = 1; col < cols; col++){\n                row[col] += row[col-1];\n            }\n        }\n        int sumCnt = 0;\n        for(int left = 0; left < cols; left++){\n            for(int right = left; right < cols; right++){\n                int currPrefSum = 0;\n                unordered_map<int, int> sumFreq;\n                sumFreq[0]++;\n                for(int r = 0; r < rows; r++){\n                    int prefSumCurrRow = matrix[r][right] - ((left - 1 > -1) ? matrix[r][left - 1] : 0);\n                    currPrefSum += prefSumCurrRow;\n                    if(sumFreq.count(currPrefSum-target)){\n                        sumCnt += sumFreq[currPrefSum-target];\n                    }\n                    sumFreq[currPrefSum]++;\n                }\n            }\n        }\n        return sumCnt;\n\n    }\n};","compare_result":"1111111111111111111111111111111111111111","title_slug":"number-of-submatrices-that-sum-to-target","has_notes":false,"flag_type":1}