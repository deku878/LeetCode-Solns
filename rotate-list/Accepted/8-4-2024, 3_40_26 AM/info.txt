{"id":1343576418,"question_id":61,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1722723026,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1343576418/","is_pending":"Not Pending","title":"Rotate List","memory":"17 MB","code":"#include<bits/stdc++.h>\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n        ListNode* rotateRight(ListNode* head, int k) {\n        if (!head) return nullptr;\n\n        vector<int> ko;\n        ListNode* current = head;\n        while (current != nullptr) {\n            ko.push_back(current->val);\n            current = current->next;\n        }\n\n        int n = ko.size();\n        k = k % n;  // Handle cases where k is greater than the length of the list\n        if (k == 0) return head;\n\n        // Rotate the vector\n        rotate(ko.begin(), ko.begin() + n - k, ko.end());\n\n        // Rebuild the linked list from the rotated vector\n        ListNode* newHead = new ListNode(ko[0]);\n        ListNode* temp = newHead;\n        for (int i = 1; i < ko.size(); i++) {\n            ListNode* newNode = new ListNode(ko[i]);\n            temp->next = newNode;\n            temp = temp->next;\n        }\n        \n        return newHead;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false,"flag_type":1}