{"id":1215348833,"question_id":174,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1711539214,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1215348833/","is_pending":"Not Pending","title":"Dungeon Game","memory":"11.4 MB","code":"class Solution {\npublic:\n    int calculateMinimumHP(vector<vector<int>>& d) {\n        int m = d.size(), n = d[0].size();\n        \n        vector<vector<int>> dp(m+1, vector<int>(n+1, INT_MAX));\n        dp[m][n-1] = dp[m-1][n] = 1;    //the DOWN and RIGHT cells from the end cell (As explained above, the minimum cost needed to move to the next cells)\n        \n        for(int i=m-1; i>=0; i--) {\n            for(int j=n-1; j>=0; j--) {    //start filling from the bottom-right corner \n                dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) - d[i][j]);     //We need to see that the health point doesn't drop to 0 or low. Hence --> max(1, ...). Now this \"...\" is the strength that's needed for this cell + that needed to travel to the next cell.  //d[i][j] is the strength provided by this cell and the strength needed to travel to the next cell is min(dp[i+1][j], dp[i][j+1])\n            }\n        }\n        return dp[0][0];    //return the health needed in the first cell\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111","title_slug":"dungeon-game","has_notes":false,"flag_type":1}